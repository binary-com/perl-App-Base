package App::Base::Script;

use Carp qw( croak );
use Config;

=head1 NAME

App::Base::Script - A truly lazy person's tool for writing self-documenting, self-monitoring scripts

=head1 SYNOPSIS

  package MyScript;

  use Moose;
  with 'App::Base::Script';

  sub documentation { return 'This is a script.'; }

  sub script_run {
      my $self = shift;
      $self->info( "Hello, world" );
      return 0;
  }

  no Moose;
  __PACKAGE__->meta->make_immutable;

  package main;

  exit MyScript->new( )->run( );

=head1 DESCRIPTION

App::Base::Script builds on App::Base::Script::Common and provides common infrastructure that is
useful to many scripts that would be needed at RMG, including:

- Standardized log formatting
- Maps built-in logging methods to syslog(3) facility

=head1 REQUIRED SUBCLASS METHODS

See also, App::Base::Script::Common "REQUIRED METHODS"

=cut

use Moose::Role;
with 'App::Base::Script::Common';
use Try::Tiny;

=head2 script_run($self, @ARGS)

The code that actually executes the meat of the script. When a App::Base::Script is invoked
by calling run(), all of the relevant options parsing and error handling is performed
and then control is handed over to the script_run() method. The return value of script_run()
is returned as the return value of run().

=cut

requires 'script_run';

around 'base_options' => sub {
    my $orig = shift;
    my $self = shift;
    # Additional automatic arguments can be added here
    return [@{$self->$orig},];
};

=head1 METHODS

=head2 __run

Implements the main run() loop of a App::Base::Script.

=cut

sub __run {
    my $self = shift;

    my $result;

    try { $result = $self->script_run(@{$self->parsed_args}); }
    catch {
        $self->error($_);
    };

    return $result;
}

=head2 error

Handles errors generated by the script. This results in a call
to App::Base::Script::Common::__error, which exits.

=cut

sub error {
    my $self = shift;
    return $self->__error(@_);
}

1;

__END__

=head1 USAGE

=head2 Invocation

Invocation of a App::Base::Script-based script is accomplished as follows:

- Define a class that implements the App::Base::Script interface (using 'with App::Base::Script')

- Instantiate an object of that class via new()

- Run the script by calling run(). The return value of run() is the exit
status of the script, and should typically be passed back to the calling
program via exit()

=head2 The new() method

(See App::Base::Script::Common::new)

=head2 Options handling

(See App::Base::Script::Common, "Options handling")

=head1 BUGS

No known bugs.

=head1 MAINTAINER

Nick Marden, <nick@regentmarkets.com>

=cut
